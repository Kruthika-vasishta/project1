"""
Project Structure
-----------------
EduTrack/
│
├── docs/                     # Documentation
│   ├── api_design.md         # API design documentation
│   ├── user_manual.md        # User manual
│   └── dev_manual.md         # Developer manual
│
├── src/                      # Source code
│   ├── feedback_entry.py     # Collect student feedback
│   ├── score_calculator.py   # Compute average score
│   ├── feedback_summary.py   # Summarize Feedback
│   └── utils.py              # Utility functions (if needed)
│
├── tests/                    # Automated tests
│   ├── test_feedback_entry.py
│   ├── test_score_calculator.py
│   └── test_feedback_summary.py
│
├── .gitignore                # Specifies intentionally untracked files that Git should ignore
│
├── README.md                 # Project overview and setup instructions
│
└── requirements.txt          # List of Python dependencies
"""

# src/feedback_entry.py
import time
import logging

logging.basicConfig(level=logging.INFO)  # Configure basic logging

def collect_feedback(student_id, course_id, feedback_text, score=None):
    """
    Collects feedback from a student for a specific course.

    Args:
        student_id (int): The ID of the student providing the feedback.
        course_id (int): The ID of the course for which feedback is given.
        feedback_text (str): The feedback text provided by the student.
        score (int, optional): An optional score (e.g., 1-5) associated with the feedback. Defaults to None.

    Returns:
        dict: A dictionary containing the feedback data.  Returns None on error.
    """
    try:
        if not isinstance(student_id, int) or student_id <= 0:
            raise ValueError("Invalid student ID.")
        if not isinstance(course_id, int) or course_id <= 0:
            raise ValueError("Invalid course ID.")
        if not isinstance(feedback_text, str) or not feedback_text.strip():
            raise ValueError("Invalid feedback text.")
        if score is not None and (not isinstance(score, int) or not 1 <= score <= 5):
            raise ValueError("Invalid score. Score must be an integer between 1 and 5.")

        feedback = {
            "student_id": student_id,
            "course_id": course_id,
            "feedback_text": feedback_text,
            "score": score,
            "timestamp": time.time()
        }
        logging.info(f"Feedback collected: {feedback}")  # Use logging
        # In a real application, you would save this to a database or file.
        return feedback
    except ValueError as e:
        logging.error(f"Error collecting feedback: {e}")
        return None

def main():
    """
    Main function to demonstrate feedback collection.
    """
    print("Collecting student feedback...")
    student_feedback = collect_feedback(
        student_id=123,
        course_id=456,
        feedback_text="This course was very helpful!",
        score=5
    )
    if student_feedback:
        print("Feedback saved successfully.")
    else:
        print("Failed to save feedback.")

    student_feedback = collect_feedback(
        student_id=123,
        course_id=456,
        feedback_text="The course was okay.",
        score=3
    )

    student_feedback = collect_feedback(
        student_id=0,  # Error
        course_id=456,
        feedback_text="The course was okay.",
        score=3
    )
    student_feedback = collect_feedback(
        student_id=123,
        course_id=456,
        feedback_text="",  # Error
        score=3
    )
    student_feedback = collect_feedback(
        student_id=123,
        course_id=456,
        feedback_text="The course was great",
        score=10  # Error
    )
    if __name__ == "__main__":
        main()

# src/score_calculator.py
import logging
logging.basicConfig(level=logging.INFO)

def calculate_average_score(feedback_list):
    """
    Calculates the average score from a list of feedback dictionaries.

    Args:
        feedback_list (list): A list of dictionaries, where each dictionary
                             represents feedback and contains a 'score' key.

    Returns:
        float: The average score, or 0 if the list is empty or no scores are present.
    """
    try:
        if not isinstance(feedback_list, list):
            raise TypeError("feedback_list must be a list.")
        if not feedback_list:
            logging.info("Feedback list is empty, returning 0.")
            return 0.0  # Return 0 for an empty list
        scores = [f.get("score") for f in feedback_list if isinstance(f, dict) and isinstance(f.get("score"), (int, float)) ]
        if not scores:
            logging.info("No valid scores found in feedback list, returning 0.")
            return 0.0
        total_score = sum(scores)
        average_score = total_score / len(scores)
        logging.info(f"Calculated average score: {average_score}")
        return average_score
    except TypeError as e:
        logging.error(f"Error calculating average score: {e}")
        return 0.0
    except Exception as e:
        logging.error(f"An unexpected error occurred: {e}")
        return 0.0

def main():
    """
    Main function to demonstrate score calculation.
    """
    # Example usage
    feedback_data = [
        {"student_id": 1, "course_id": 101, "feedback_text": "Good", "score": 4},
        {"student_id": 2, "course_id": 101, "feedback_text": "Excellent", "score": 5},
        {"student_id": 3, "course_id": 101, "feedback_text": "Okay", "score": 3},
        {"student_id": 4, "course_id": 102, "feedback_text": "Great", "score": 4},
        {"student_id": 5, "course_id": 102, "feedback_text": "Bad", "score": 2},
        {"student_id": 6, "course_id": 102, "feedback_text": "Very Good", "score": 5},
        {"student_id": 7, "course_id": 103, "feedback_text": "Nice", "score": 4},
        {"student_id": 8, "course_id": 103, "feedback_text": "Super", "score": 5},
        {"student_id": 9, "course_id": 103, "feedback_text": "Not Bad", "score": 3},
        {"student_id": 10, "course_id": 103, "feedback_text": "Average", "score": 3},
        {"student_id": 11, "course_id": 103, "feedback_text": "Awful"},  # no score
        {"student_id": 12, "course_id": 103, "feedback_text": "Amazing", "score": None},  # None score
        {"student_id": 13, "course_id": 103, "feedback_text": "Amazing", "score": "error"},  # wrong score type
        {"student_id": 14, "course_id": 104, "feedback_text": "Amazing", "score": 2.5},
    ]
    print("Feedback data:", feedback_data)
    average_score_101 = calculate_average_score([f for f in feedback_data if f["course_id"] == 101])
    average_score_102 = calculate_average_score([f for f in feedback_data if f["course_id"] == 102])
    average_score_103 = calculate_average_score([f for f in feedback_data if f["course_id"] == 103])
    average_score_104 = calculate_average_score([f for f in feedback_data if f["course_id"] == 104])
    average_score_all = calculate_average_score(feedback_data)

    print(f"Average score for course 101: {average_score_101}")
    print(f"Average score for course 102: {average_score_102}")
    print(f"Average score for course 103: {average_score_103}")
    print(f"Average score for course 104: {average_score_104}")
    print(f"Average score for all courses: {average_score_all}")  # 3.58

if __name__ == "__main__":
    main()

# src/feedback_summary.py
import logging
from collections import Counter

logging.basicConfig(level=logging.INFO)

def summarize_feedback(feedback_list, top_n=3):
    """
    Summarizes student feedback, showing top scores and grade-wise counts.

    Args:
        feedback_list (list): A list of feedback dictionaries.
        top_n (int, optional): The number of top scores to display. Defaults to 3.

    Returns:
        dict: A dictionary containing the summary data.
              Returns None on error.
    """
    try:
        if not isinstance(feedback_list, list):
            raise TypeError("feedback_list must be a list.")
        if not isinstance(top_n, int) or top_n < 1:
            raise ValueError("top_n must be a positive integer.")

        if not feedback_list:
            logging.info("Feedback list is empty.")
            return {
                "top_scores": [],
                "grade_counts": {},
            }

        # Extract scores, handling None values
        scores = [f.get("score") for f in feedback_list if isinstance(f, dict) and isinstance(f.get("score"), (int, float))]
        # Calculate top scores
        top_scores = sorted(Counter(scores).items(), key=lambda item: item[1], reverse=True)[:top_n]

        # Determine letter grades and count them
        grade_counts = {}
        for feedback in feedback_list:
            score = feedback.get("score")
            if isinstance(score, (int, float)):
                if 5 >= score >= 4.5:
                    grade = "A"
                elif 4.5 > score >= 3.5:
                    grade = "B"
                elif 3.5 > score >= 2.5:
                    grade = "C"
                elif 2.5 > score >= 1.5:
                    grade = "D"
                elif 1.5 > score >= 1:
                    grade = "E"
                else:
                    grade = "F"
                grade_counts[grade] = grade_counts.get(grade, 0) + 1
        summary = {
            "top_scores": top_scores,
            "grade_counts": grade_counts,
        }
        logging.info(f"Feedback summary: {summary}")
        return summary
    except TypeError as e:
        logging.error(f"Error summarizing feedback: {e}")
        return None
    except ValueError as e:
        logging.error(f"Error summarizing feedback: {e}")
        return None
    except Exception as e:
        logging.error(f"An unexpected error occurred: {e}")
        return None
def main():
    """
    Main function to demonstrate feedback summary.
    """
    # Example Usage
    feedback_data = [
        {"student_id": 1, "course_id": 101, "feedback_text": "Good", "score": 4},
        {"student_id": 2, "course_id": 101, "feedback_text": "Excellent", "score": 5},
        {"student_id": 3, "course_id": 101, "feedback_text": "Okay", "score": 3},
        {"student_id": 4, "course_id": 102, "feedback_text": "Great", "score": 4},
        {"student_id": 5, "course_id": 102, "feedback_text": "Bad", "score": 2},
        {"student_id": 6, "course_id": 102, "feedback_text": "Very Good", "score": 5},
        {"student_id": 7, "course_id": 103, "feedback_text": "Nice", "score": 4},
        {"student_id": 8, "course_id": 103, "feedback_text": "Super", "score": 5},
        {"student_id": 9, "course_id": 103, "feedback_text": "Not Bad", "score": 3},
        {"student_id": 10, "course_id": 103, "feedback_text": "Average", "score": 3},
        {"student_id": 11, "course_id": 103, "feedback_text": "Awful"},  # no score
        {"student_id": 12, "course_id": 103, "feedback_text": "Amazing", "score": None},  # None score
        {"student_id": 13, "course_id": 103, "feedback_text": "Amazing", "score": "error"},  # wrong score type
        {"student_id": 14, "course_id": 104, "feedback_text": "Amazing", "score": 2.5},
    ]

    summary = summarize_feedback(feedback_data)
    print(summary)
    empty_summary = summarize_feedback([])
    print(empty_summary)
    invalid_top_n = summarize_feedback(feedback_data, top_n=-1)
    print(invalid_top_n) #Should return None

if __name__ == "__main__":
    main()
